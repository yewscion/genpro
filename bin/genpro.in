#!/usr/bin/env -S guile \\
-e main -s
!#
#|
This program is a part of @PACKAGE_STRING@.

@LICENSE@

You are welcome to change this software in any way You see fit. Some
helpful information should You choose to do so:

Bug Reports: @PACKAGE_BUGREPORT@
Homepage: @PACKAGE_URL@
Documentation: @PACKAGE_DOCS_COMMAND@ @PACKAGE_NAME@

Happy Hacking!
|#
(use-modules (ice-9 getopt-long)   ; For CLI Options and Flags.
             (ice-9 ftw)           ; For Filesystem Access.
             (ice-9 textual-ports) ; For Writing to Files.
             (srfi srfi-19)        ; For Dates.
             (cdr255 userlib)      ; My personal user library.
             (cdr255 genpro))
;;; Specific Script Variables
(define %default-config
  ;;; This is the default configuration for this script. Should be scheme
  ;;; code that will create the "genpro-configuration" variable.
  ";;; Configuration File for genpro.
;;; Part of the genpro project.
;;;
;;; This file doesn't do anything yet.
;;;

(define genpro-configuration
 (list
   (foo bar)))
")

(define configuration
  ;;; Load the configuration file (default above) at the given path. Only
  ;;; change this if You really need to; most configurations should be under
  ;;; ~/.config.
  (begin
    (if (not (file-exists? (dereference-env-in-string "HOME" "$HOME/.config/genpro")))
        (mkdir (dereference-env-in-string "HOME" "$HOME/.config/genpro")))
    (get-or-create-configuration-file
     "$HOME/.config/genpro/genpro.scm"
     %default-config)))

;;; Actually Load the Config into memory.
(eval-string configuration)

;;; Main
(define option-spec
  ;;; CLI Flags.
  ;;;
  ;;; Generic Format:
  ;;;
  ;;; (LONGOPTION (single-char #\c) ;; Short Option (Optional)
  ;;;             (value [#t|#f|optional]) ;; Should this take a value?
  ;;;             (required? [#t|#f]) ;; Is it an error to omit this option?
  ;;;             (predicate (lambda (x) …)) ;; Procedure for value checking.
  '((version (single-char #\v) (value #f))
    (help (single-char #\h) (value #f))
                                        ; Add more here.
    (generate (single-char #\g) (value #f))
    (publish (single-char #\p) (value #f))
    (clean (single-char #\c) (value #f))
    (run (single-char #\r) (value #f))
    ))

(define (main args)
  (let* ((options (getopt-long args option-spec))
         (version (option-ref options 'version #f))
         (help (option-ref options 'help #f))
                                        ; Add more here, from above. The
                                        ; final field of option-ref is the
                                        ; default on omission.
         (options (getopt-long args option-spec))
         (version (option-ref options 'version #f))
         (generate (option-ref options 'generate #f))
         (run (option-ref options 'run #f))
         (publish (option-ref options 'publish #f))
         (clean (option-ref options 'clean #f))
         (help (option-ref options 'help #f))
         (non-options (option-ref options '() '())))
    (cond ((or
            (not (equal? (length non-options) 0)) ; If there's meant to be
                                                  ; non-option arguments,
                                                  ; this needs changed.
            help
            version)
           (display %help-string)
           (newline))
          (%missing
           (display %missing)
           (newline))
                                        ; Add more here to handle
                                        ; options/edge cases.
          (else
           (if (not (file-exists? ".genpro-metadata"))
               (begin
                 (display "Initializing Project…\n\n")
                 (initialize-project (build-genpro-metadata))
                 (display
                  (string-append
                   "Created '.genpro-metadata', '.projectile', and '.assignment'"
                   "files.\nPlease edit those files and then run 'genpro -g'."
                   "\n"))
                 (quit)))
           (eval-string (call-with-input-file ".genpro-metadata"
                          (lambda (port)
                            (get-string-all port))))
           (cond (clean (clean-project genpro-metadata))
                 (generate (if (not (file-exists? "src/"))
                               (make-project genpro-metadata)
                               (display
                                (string-append "It looks like this project "
                                               "is already generated…\n\n"
                                               "Maybe try 'genpro -p'?"))))
                 (publish (compile-project genpro-metadata))
                 (run (cond ((project-java? genpro-metadata)
                             (run-run-jarfile-command genpro-metadata))
                            (else
                             (display
                              (string-append "I don't know what You want "
                                             "to run… Check the assignment "
                                             "directory?\n")))))
                 (else
                  (display %help-string)))))))

;;; Standard Script Variables

(define %command-and-package-alist
  ;;; Add commands that the script uses that need to exist on the system
  ;;; (Left) and the GNU Guix package they can be found in (Right) for each
  ;;; external program used in the script.
  '(("guile" "guile-3.0")
    ("biber" "biber")
    ("lwarpmk" "texlive-latex-lwarpmk")
    ("mpost" "texlive-metapost")
    ("fc-list" "fontconfig")
    ("sed" "sed")
    ("grep" "grep")))

(define description-spec
  ;;; Each option in option-spec needs to be mentioned here. ACTIONS are
  ;;; usually choices about how the program runs, whereas OPTIONS change how
  ;;; those actions run. The final member should be a very brief description
  ;;; of the option, no longer than ~40 characters long (prefix of 32).
  '((help action "Display this help")
    (version action "Display version info")
    (generate action "Run the initial project build.")
    (publish action "Publish new data to the project.")
    (clean action "Regenerate the project to fix problems.")
    (run action "Run the compiled program (java only).")))
 
(define note-spec
  ;;; This is a list of specific notes to the user on various errata that
  ;;; might help them use the script. Each member of this list should be a
  ;;; string, and should be a self-contained note.
  (list
   (string-append "This program can optionally make use of a number of"
                  "programming languages:\n\n * GNU APL\n * gcc\n * g++\n"
                  " * GNU Automake\n * GNU Guile\n * Lynx\n * OpenJDK\n"
                  " * OCaml\n * SWI Prolog\n * PostgreSQL\n * Zig.")
   (string-append "The following TeX packages are needed for basic\n"
                  "functionality, as well:\n\n"
                  " * ifptex (texlive-generic-ifptex)\n")))

(define license-spec
  ;;; This is the license portion of the help string, which tells the user
  ;;; how this script is licensed, how to get help, and where to send bug
  ;;; reports. It relies on autoconf for some of its features, in its default
  ;;; state.
  (string-append
   "This program is a part of @PACKAGE_STRING@\n"
   "@LICENSE@"
   "Please report bugs to @PACKAGE_BUGREPORT@\n"
   "and see @PACKAGE_URL@\n"
   "for the latest version.\n\n"

   "This program is entirely written in GNU Guile Scheme,\n"
   "and You are welcome to change it how You see fit.\n\n"

   "Guile Online Help: <https://www.gnu.org/software/guile/>\n"
   "Local Online Help: 'info @PACKAGE_STRING@'\n"))

(define %help-string
  ;;; Build the actual help string from the above. The first entry should be
  ;;; the standard "Here are all of the flags or permutations of this
  ;;; command" line that exists at the top of many help strings.
  (generate-help-string "Usage: genpro [-p|-g|-r|-h|-v]"
                        option-spec
                        description-spec
                        note-spec
                        license-spec))
(define %missing
  ;;; Build the missing command string.
  (missing-commands %command-and-package-alist))

;; Local Variables:
;; mode: scheme
;; End:
