#|
This program is a part of @PACKAGE_STRING@.

@LICENSE@

Bug Reports: @PACKAGE_BUGREPORT@
Homepage: @PACKAGE_URL@
Documentation: @PACKAGE_DOCS_COMMAND@ @PACKAGE_NAME@
|#
(define-module (cdr255 genpro)
  :use-module (ice-9 ftw)           ; For Filesystem Access.
  :use-module (ice-9 textual-ports) ; For Writing to Files.
  :use-module (srfi srfi-19)        ; For Dates.
  :use-module (cdr255 userlib)      ; Utility Functions.
  :use-module (ice-9 popen)         ; Pipes
  :use-module (srfi srfi-9)
  :use-module (cdr255 genpro-templates)
  :use-module (ice-9 i18n)
  :use-module (ice-9 exceptions)
  :use-module (cdr255 combinators)
  :use-module (system base compile)
  :export (initialize-project
           build-genpro-metadata
           make-project
           compile-project
           run-run-jarfile-command
           clean-project
           build-project-name
           project-annotated-bibliography?
           project-apl?
           project-author
           project-authority
           project-bibliography
           project-citation-style
           project-content?
           project-c?
           project-cpp?
           project-date
           project-figures?
           project-font-code
           project-font-main
           project-gemini?
           project-genpro-version
           project-guile?
           project-html?
           project-institution
           project-java?
           project-java-local-libraries
           project-local-bibliography?
           project-metapost?
           project-ocaml?
           project-pdf?
           project-project-title
           project-prolog?
           project-references?
           project-sql?
           project-section
           project-text?
           project-zig?))

(define +clean-files-command+
  (string-append
   "find . -maxdepth 2 "
   "-not -path *assignment* "
   "-not -path ./lib/* "
   "-not -path ./lib "
   "-not -path ./src "
   "-exec rm -fv {} \\;"))
(define-record-type <project-information>
  (make-project-information annotated-bibliography?
                            apl?
                            author
                            authority
                            bibliography
                            citation-style
                            content?
                            c?
                            cpp?
                            date
                            figures?
                            font-code
                            font-main
                            gemini?
                            genpro-version
                            guile?
                            html?
                            institution
                            java?
                            java-local-libraries
                            local-bibliography?
                            metapost?
                            ocaml?
                            pdf?
                            project-title
                            prolog?
                            references?
                            sql?
                            section
                            text?
                            zig?)
  project-information?
 (annotated-bibliography? project-annotated-bibliography?)
 (apl? project-apl?)
 (author project-author)
 (authority project-authority)
 (bibliography project-bibliography)
 (citation-style project-citation-style)
 (content? project-content?)
 (c? project-c?)
 (cpp? project-cpp?)
 (date project-date)
 (figures? project-figures?)
 (font-code project-font-code)
 (font-main project-font-main)
 (gemini? project-gemini?)
 (genpro-version project-genpro-version)
 (guile? project-guile?)
 (html? project-html?)
 (institution project-institution)
 (java? project-java?)
 (java-local-libraries project-java-local-libraries)
 (local-bibliography? project-local-bibliography?)
 (metapost? project-metapost?)
 (ocaml? project-ocaml?)
 (pdf? project-pdf?)
 (project-title project-project-title)
 (prolog? project-prolog?)
 (references? project-references?)
 (sql? project-sql?)
 (section project-section)
 (text? project-text?)
 (zig? project-zig?))

(define*
  (build-genpro-metadata
   #:key
   (annotated-bibliography? #false)
   (apl? #false)
   (author "Christopher Rodriguez")
   (authority "Dr. Some Professor")
   (bibliography "~/Documents/biblio/main.bib")
   (citation-style 'apa7)
   (content? #true)
   (c? #false)
   (cpp? #false)
   (date (date->string (current-date) "~1"))
   (figures? #true)
   (font-code "unifont.otf")
   (font-main "texgyretermes-regular.otf")
   (gemini? #false)
   (genpro-version "1.0.0")
   (guile? #false)
   (html? #true)
   (institution "Colorado State University Global")
   (java? #false)
   (java-local-libraries '())
   (local-bibliography? #false)
   (metapost? #true)
   (ocaml? #false)
   (pdf? #true)
   (project-title "Title of Paper")
   (prolog? #false)
   (references? #true)
   (sql? #false)
   (section "23FA-XXX000-1: The Title of the Class")
   (text? #true)
   (zig? #false))
  (make-project-information annotated-bibliography?
                            apl?
                            author
                            authority
                            bibliography
                            citation-style
                            content?
                            c?
                            cpp?
                            (parse-date-string date)
                            figures?
                            font-code
                            font-main
                            gemini?
                            genpro-version
                            guile?
                            html?
                            institution
                            java?
                            java-local-libraries
                            local-bibliography?
                            metapost?
                            ocaml?
                            pdf?
                            project-title
                            prolog?
                            references?
                            sql?
                            section
                            text?
                            zig?))

(define (build-project-file-suffix info comment-prefix)
  (string-append comment-prefix
                 " Genpro Version "
                 (project-genpro-version info)))

(define (build-date-string info)
  (date->string (project-date info) "~1"))

(define (parse-date-string str)
  (string->date str "~Y-~m-~d"))

(define (build-section-code info)
  (car (string-split (project-section info) #\:)))

(define (build-section-title info)
  (cadr (string-split (project-section info) #\:)))

(define (build-file-name date category title)
  (sanitize-string
   '((" " #\-)
     ("!?@#$%^&*()=+;:><," #\_))
   (string-locale-downcase
    (string-join
     (list date
           category
           title)
     "."
     'infix))))

(define (build-latex-command command-name value)
  (string-append "\\newcommand{\\"
                 command-name
                 "}{\\string{"
                 value
                 "}}"))

(define (build-project-name info)
  (let ((section-code (build-section-code info))
        (date (build-date-string info))
        (title (project-project-title info))
        (annotate? (project-annotated-bibliography? info)))
    (string-append
     (build-file-name date section-code title)
     (if annotate?
         "-annotated-bibliography"
         ""))))

(define (build-project-file-header info file comment-prefix)
  (string-append comment-prefix " This is "
                 file
                 ",\n"
                 comment-prefix " a part of "
                 (build-project-name info) "."))

(define (build-meta-file-content info)
  (let ((pre (build-project-file-header info "meta.tex" "%"))
        (bibliography (project-bibliography info))
        (title (project-project-title info))
        (author (project-author info))
        (institution (project-institution info))
        (section (project-section info))
        (authority (project-authority info))
        (date (build-date-string info))
        (suf (build-project-file-suffix info "%")))
    (string-join
     (list
      pre
      (build-latex-command "localbibliography" bibliography)
      (build-latex-command "localtitle" title)
      (build-latex-command "localauthor" author)
      (build-latex-command "localschool" institution)
      (build-latex-command "localsection" section)
      (build-latex-command "localprofessor" authority)
      (build-latex-command "localduedate" date)
      suf)
     "\n"
     'infix)))

(define (build-latex-citation-style info)
  (cond ((eq? (project-citation-style info)
               'apa7)
         "apa,")
        (else
         "apa,")))

(define (build-latex-annotated-bib info)
  (if (project-annotated-bibliography? info)
                           "annotation=true,"
                           "annotation=false,"))

(define (build-file-not-found-exception file)
  (make-exception-with-message (string-append
                                "Could not find "
                                file
                                "!")))

(define (dump-string-to-file-if-bound file string)
  (if string
      (dump-string-to-file file string)))

(define (find-font-file-on-system font-file-name)
  (shell-output-to-string
                   (string-append
                    "fc-list | grep "
                    font-file-name
                    " | sed 's/:.*//g;s/\\/[-A-z.]*$/\\//;1q'")))

(define-syntax find-file-using-proc
  (syntax-rules ()
    ((find-file-using-proc proc arg fail exec)
     (begin
       (guard (ex
               ((exception-with-message? ex)
                (display (string-append "Error opening file: "
                                        (exception-message ex)
                                        "\n"))
                ""))
         (let ((result (proc arg)))
           (if (string=? fail result)
               (raise-continuable
                (exec arg))
               result)))))))

(define-syntax wrap-file-string
  (syntax-rules ()
    ((wrap-file-string info filename comment-prefix file-string)
     (string-join
      (list
       (build-project-file-header info filename comment-prefix)
       file-string
       (build-project-file-suffix info comment-prefix))
      "\n"
      'infix))))

(define (find-font-file font-file-name)
  (find-file-using-proc find-font-file-on-system
                        font-file-name
                        ""
                        build-file-not-found-exception))

(define (build-preamble-file-font-section info)
  (let* ((main-font-file (project-font-main info))
         (code-font-file (project-font-code info))
         (main-font-path (find-font-file main-font-file))
         (code-font-path (find-font-file code-font-file)))
    (string-append
     "\\newfontfamily{\\fontmain}{"
     main-font-file
     "}[Path = "
     main-font-path
     "]\n\\newfontfamily{\\fontcode}{"
     code-font-file
     "}[Path = "
     code-font-path
     "]")))

(define (build-preamble-file-content info)
  (let ((pre (build-project-file-header info "preamble.tex" "%"))
        (citation-style (build-latex-citation-style info))
        (annotated-bib (build-latex-annotated-bib info))
        (font-section (build-preamble-file-font-section info))
        (suf (build-project-file-suffix info "%")))
    (string-join (list  pre
                        +preamble-template-prefix+
                        citation-style
                        annotated-bib
                        +preamble-template-infix+
                        font-section
                        +preamble-template-postfix+
                        suf)
                 "\n"
                 'infix)))

(define (build-listings-file-content info)
  (wrap-file-string info "listings.tex" "%" +listings-template+))

(define (build-colors-file-content info)
  (wrap-file-string info "colors.tex" "%" +colors-template+))

(define (build-title-file-content info)
  (wrap-file-string info "title.tex" "%" +title-template+))

(define (build-java-file-content info)
  (wrap-file-string info "/assignment/Implementation.java" "//"
                    +java-template+))

(define (build-java-package-info-file-content info)
  (wrap-file-string info "/assignment/package-info.java" "//"
                    +java-package-info-template+))

(define (build-metapost-file-content info)
  (wrap-file-string info "metapost.mp" "%" +metapost-template+))

(define (build-projectile-file-content info)
  (build-project-file-suffix info ";;;"))

(define (build-genpro-metadata-file-content info)
  (wrap-file-string info ".genpro-metadata" ";;;"
                    +genpro-metadata-template+))

(define (build-main-file-content info)
  (let ((content (if (project-content? info)
                     "\\input{content}\n\\newpage"
                     ""))
        (references (if (project-references? info)
                        (string-append
                         "\\section*{References}\n"
                         "\\printbibliography[heading=none]\n"
                         "\\newpage")
                        ""))
        (figures (if (project-figures? info)
                     "\\input{figures}"
                     "")))
    (string-join (list
                  +main-template-prefix+
                  content
                  references
                  figures
                  "\\end{document}")
                 "\n"
                 'infix)))

(define (build-apl-file-content info)
  (wrap-file-string info "Implementation.apl" "⍝" +apl-file-template+))

(define (build-c-makefile-content info)
  (wrap-file-string info "Makefile.C" "#" +c-makefile-template+))

(define (build-c-file-content info)
  (wrap-file-string info "Implementation.c" "//" +c-file-template+))

(define (build-cpp-makefile-content info)
  (wrap-file-string info "Makefile.CPP" "#" +cpp-makefile-template+))

(define (build-cpp-file-content info)
  (wrap-file-string info "Implementation.cpp" "//" +cpp-file-template+))

(define (build-guile-file-content info)
  (wrap-file-string info "Implementation.scm" ";;;"
                    +guile-file-template+))

(define (build-ocaml-file-content info)
  +ocaml-file-template+)

(define (build-prolog-file-content info)
  (wrap-file-string info "Implementation.pl" "%" +prolog-file-template+))

(define (build-zig-file-content info)
  (wrap-file-string info "Implementation.zig" "//" +zig-file-template+))

(define (initialize-project info)
  (dump-string-to-file ".genpro-metadata"
                       (build-genpro-metadata-file-content info))
  (dump-string-to-file ".projectile"
                       (build-projectile-file-content info))
  (dump-string-to-file ".assignment"
                       ""))

(define (build-lualatex-command info)
  (string-append
   "lualatex --output-format pdf --jobname="
   (build-project-name info)
   " --shell-escape main.tex"))

(define (show-lualatex-command info)
  ((bluebird display build-lualatex-command) info))

(define (run-lualatex-command info)
  ((bluebird system build-lualatex-command) info))

(define (build-lynx-command info)
  (let ((project-name (build-project-name info)))
    (string-append
     "lynx --dump "
     project-name
     ".html > "
     project-name
     ".txt")))

(define (show-lynx-command info)
  ((bluebird display build-lynx-command) info))

(define (run-lynx-command info)
  ((bluebird system build-lynx-command) info))

(define (build-java-classpath-includes info)
  (let ((libs (project-java-local-libraries info)))
    (if (> (length libs) 0)
        (string-join
         (map (lambda (x)
                (string-append "../../lib/"
                               x))
              libs)
         ":"
         'infix)
        ".")))

(define (build-java-zip-files info)
  (let ((libs (project-java-local-libraries info)))
    (string-join (list
                  " assignment/*.java"
                  (string-append (build-project-name info)
                                 ".jar")
                  "doc/"
                  (if (> (length libs) 0)
                      (string-join
                       (map
                        (lambda (x)
                          (string-append "../lib/" x))
                        libs)
                       " "
                       'infix)
                      ""))
                 " "
                 'infix)))

(define (build-java-zipfile-command info)
  (let* ((zip-prefix " zip -9 -r -v ")
         (name (build-project-name info))
         (files (build-java-zip-files info))
         (tmp-dir (string-append " " name ".java/ "))
         (zip-name (string-append " " name ".java.zip"))
         (wip-name (string-append name "-wip.zip")))
    (string-join (list
                  (string-append zip-prefix wip-name files)
                  (string-append " mkdir -pv " tmp-dir)
                  (string-append " cd " tmp-dir)
                  (string-append " unzip ../" wip-name)
                  " cd .. "
                  (string-append " rm " zip-name)
                  (string-append zip-prefix zip-name tmp-dir)
                  (string-append " rm -rf " wip-name tmp-dir))
                 " && "
                 'infix)))

(define (show-java-zipfile-command info)
  ((bluebird display build-java-zipfile-command) info))

(define (run-java-zipfile-command info)
  ((bluebird system build-java-zipfile-command) info))

(define (build-run-jarfile-command info)
  (let* ((name (build-project-name info))
         (classpath (build-java-classpath-includes info))
         (jarfile-name (string-append "src/" name ".jar")))
    (string-join (list
                  "java -cp"
                  classpath
                  "-jar"
                  jarfile-name)
                 " "
                 'infix)))

(define (show-run-jarfile-command info)
  ((bluebird display build-run-jarfile-command) info))

(define (run-run-jarfile-command info)
  ((bluebird system build-run-jarfile-command) info))

(define (build-javadoc-command info)
  (let ((classpath (string-append
                    "..:"
                    (build-java-classpath-includes info))))
    (string-join (list
                  "javadoc -private -cp"
                  classpath
                  "assignment")
                 " "
                 'infix)))

(define (show-javadoc-command info)
  ((bluebird display build-javadoc-command) info))

(define (run-javadoc-command info)
  ((bluebird system build-javadoc-command) info))

(define (build-javac-command info)
  (let ((classpath (build-java-classpath-includes info)))
    (string-join (list "javac -cp"
                       classpath
                       "assignment/*.java")
                 " "
                 'infix)))

(define (show-javac-command info)
  ((bluebird display build-javac-command) info))

(define (run-javac-command info)
  ((bluebird system build-javac-command) info))

(define (build-make-jar-command info)
  (string-append "jar -v -c -f "
                 (build-project-name info)
                 ".jar -e assignment.Implementation assignment/"))

(define (show-make-jar-command info)
  ((bluebird display build-make-jar-command) info))

(define (run-make-jar-command info)
  ((bluebird system build-make-jar-command) info))

(define (build-local-bibliography-command info)
  (let ((name (build-project-name info)))
    (string-append "bibexport -o "
                   name
                   ".bib "
                   name)))

(define (show-local-bibliography-command info)
  ((bluebird display build-local-bibliography-command) info))

(define (run-local-bibliography-command info)
  ((bluebird system build-local-bibliography-command) info))

(define (compile-local-bibliography-component info)
  (run-local-bibliography-command info))

(define (build-javafile-redacted-filename filename)
  (add-section-to-filename "redacted" filename))

(define (compile-javafile-redacted-version filename)
  (if (not (file-exists? filename))
      (build-file-not-found-exception filename)
      (dump-string-to-file
       (build-javafile-redacted-filename filename)
       (get-file-as-string filename))))

(define (compile-java-component info)
  (if (and (project-java? info)
           (file-exists? "assignment/Implementation.java"))
      (system "rm -rf assignment/*.redacted.*")
      (let ((list-of-javafiles (find-all-files-with-suffix "assignment/"
                                                           "java")))
        (system "cd doc/")
        (run-javadoc-command info)
        (system "cd ../")
        (run-javac-command info)
        (run-make-jar-command info)
        (for-each (lambda (x)
                    (compile-javafile-redacted-version x))
                  list-of-javafiles)
        (run-java-zipfile-command info))))

(define (find-all-files-with-suffix directory suffix)
  (scandir directory
           (lambda (x)
             (pattern-in-suffix? x suffix (+ 1 (string-length suffix))))))

(define (pattern-in-suffix? item pattern suffix)
  (if (and (>= (string-length item) (string-length pattern))
           (>= (string-length item) suffix))
      (string-contains item pattern (- (string-length item) suffix))
      #f))

(define (compile-metapost-component info)
  (if (file-exists? "metapost.mp")
      (system "mpost metapost.mp")
      (build-file-not-found-exception "metapost.mp")))

(define (compile-text-component info)
  (let ((file (string-append (build-project-name info) ".html")))
    (if (file-exists? file)
        (run-lynx-command info))))

(define (build-biber-pdf-command info)
  (string-append "biber " (build-project-name info)))

(define (show-biber-pdf-command info)
  ((bluebird display build-biber-pdf-command) info))

(define (run-biber-pdf-command info)
  ((bluebird system build-biber-pdf-command) info))

(define (build-biber-html-command info)
  (string-append "biber " (build-project-name info) "_html"))

(define (show-biber-html-command info)
  ((bluebird display build-biber-html-command) info))

(define (run-biber-html-command info)
  ((bluebird system build-biber-html-command) info))

(define (compile-biber-component info)
  (run-biber-pdf-command info)
  (run-biber-html-command info))

(define (build-lwarpmk-command command)
  (string-append "lwarpmk " command))

(define (build-lwarpmk-trigger-command)
  (build-lwarpmk-command "again"))

(define (show-lwarpmk-trigger-command)
  ((bluebird display build-lwarpmk-trigger-command)))

(define (run-lwarpmk-trigger-command)
  ((bluebird system build-lwarpmk-trigger-command)))

(define (build-lwarpmk-clean-command)
  (build-lwarpmk-command "clean"))

(define (show-lwarpmk-clean-command)
  ((bluebird display build-lwarpmk-clean-command)))

(define (run-lwarpmk-clean-command)
  ((bluebird system build-lwarpmk-clean-command)))

(define (build-lwarpmk-pdf-command)
  (build-lwarpmk-command "print"))

(define (show-lwarpmk-pdf-command)
  ((bluebird display build-lwarpmk-pdf-command)))

(define (run-lwarpmk-pdf-command)
  ((bluebird system build-lwarpmk-pdf-command)))

(define (build-lwarpmk-html-command)
  (build-lwarpmk-command "html"))

(define (show-lwarpmk-html-command)
  ((bluebird display build-lwarpmk-html-command)))

(define (run-lwarpmk-html-command)
  ((bluebird system build-lwarpmk-html-command)))

(define (build-lwarpmk-images-command)
  (build-lwarpmk-command "limages"))

(define (show-lwarpmk-images-command)
  ((bluebird display build-lwarpmk-images-command)))

(define (run-lwarpmk-images-command)
  ((bluebird system build-lwarpmk-images-command)))

(define (build-lwarpmk-cleanimages-command)
  (build-lwarpmk-command "cleanlimages"))

(define (show-lwarpmk-cleanimages-command)
  ((bluebird display build-lwarpmk-cleanimages-command)))

(define (run-lwarpmk-cleanimages-command)
  ((bluebird system build-lwarpmk-cleanimages-command)))

(define (compile-html-component info)
  (run-lwarpmk-trigger-command)
  (compile-images)
  (run-lwarpmk-html-command)
  (compile-images))

(define (compile-pdf-component info)
  (run-lwarpmk-trigger-command)
  (compile-images)
  (run-lwarpmk-pdf-command))

(define (compile-images)
  (run-lwarpmk-cleanimages-command)
  (run-lwarpmk-images-command))

(define (compile-c-component info)
  (chdir "./assignment/")
  (system "make -f Makefile.C")
  (chdir "../"))

(define (compile-cpp-component info)
  (chdir "./assignment/")
  (system "make -f Makefile.CPP")
  (chdir "../"))

(define (compile-guile-component info)
  (chdir "./assignment/")
  (map compile-file (find-all-files-with-suffix "." "scm"))
  (chdir "../"))

(define (compile-prolog-component info)
  (chdir "./assignment/")
  (system (string-append "swipl --goal=main --stand_alone=true "
                         "-o prolog-implementation -c Implementation.pl"))
  (chdir ".."))

(define (compile-apl-component info)
  (chdir "./assignment/")
  (system "apl --script -f Implementation.apl")
  (chdir "../"))

(define (compile-ocaml-component info)
  (chdir "./assignment/")
  (system "ocamlopt -o ocaml-implementation Implementation.ml")
  (chdir "../"))

(define (compile-zig-component info)
  (chdir "./assignment/")
  (system "zig build-exe Implementation.zig")
  (chdir "../"))

(define (compile-gemini-component info)
  (display "Gemini Not Implemented Yet!"))

(define (compile-sql-component info)
  (display "SQL Not Implemented Yet!"))

(define (slurp-file-if-exists filename)
  (if (file-exists? filename)
      (get-file-as-string filename)
      #f))

(define (move-file old-file new-file)
  (copy-file old-file new-file)
  (delete-file old-file))

(define (clean-project info)
  (if (and (file-exists? "content.tex")
           (file-exists? ".genpro-metadata"))
      (let ((content (get-file-as-string "content.tex"))
            (metadata (get-file-as-string "figures.tex"))
            (figures (slurp-file-if-exists "figures.tex"))
            (assignment (slurp-file-if-exists ".assignment"))
            (projectile (slurp-file-if-exists ".projectile"))
            (metapost (slurp-file-if-exists "./src/metapost.mp")))
        (system +clean-files-command+)
        (dump-string-to-file-if-bound ".genpro-metadata" metadata)
        (dump-string-to-file-if-bound ".projectile" projectile)
        (dump-string-to-file-if-bound ".assignment" assignment)
        (make-project info)
        (dump-string-to-file-if-bound "content.tex" content)
        (dump-string-to-file-if-bound "figures.tex" figures)
        (dump-string-to-file-if-bound "./src/metapost.mp" metapost)
        (compile-project info))))

(define (make-project info)
  (let* ((project-name (build-project-name info))
         (pdf-file-name (string-append "./" project-name ".pdf"))
         (html-file-name (string-append "./" project-name ".html"))
         (pdf-link-name (string-append "./src/" project-name ".pdf"))
         (html-link-name (string-append "./src/" project-name ".html")))
    (mkdir "./src/")
    (mkdir "./src/assignment/")
    (dump-string-to-file "./src/main.tex"
                         (build-main-file-content info))
    (dump-string-to-file "./src/meta.tex"
                         (build-meta-file-content info))
    (dump-string-to-file "./src/preamble.tex"
                         (build-preamble-file-content info))
    (dump-string-to-file "./src/title-page.tex"
                         (build-title-file-content info))
    (dump-string-to-file "./src/listings.tex"
                         (build-listings-file-content info))
    (dump-string-to-file "./src/colors.tex"
                         (build-colors-file-content info))
    (if (project-metapost? info)
        (dump-string-to-file "./src/metapost.mp"
                             (build-metapost-file-content info)))
    (if (project-apl? info)
        (dump-string-to-file "./src/assignment/Implementation.apl"
                             (build-apl-file-content info)))
    (if (project-c? info)
        (begin
          (dump-string-to-file "./src/assignment/Makefile.C"
                               (build-c-makefile-content info))
          (dump-string-to-file "./src/assignment/Implementation.c"
                               (build-c-file-content info))))
    (if (project-cpp? info)
        (begin
          (dump-string-to-file "./src/assignment/Makefile.CPP"
                               (build-cpp-makefile-content info))
          (dump-string-to-file "./src/assignment/Implementation.cpp"
                               (build-cpp-file-content info))))
    (if (project-guile? info)
        (dump-string-to-file "./src/assignment/Implementation.scm"
                             (build-guile-file-content info)))
    (if (project-java? info)
        (begin
          (dump-string-to-file "./src/assignment/Implementation.java"
                               (build-java-file-content info))
          (dump-string-to-file "./src/assignment/package-info.java"
                               (build-java-package-info-file-content
                                info))))
    (if (project-ocaml? info)
        (dump-string-to-file "./src/assignment/Implementation.ml"
                             (build-ocaml-file-content info)))
    (if (project-prolog? info)
        (dump-string-to-file "./src/assignment/Implementation.pl"
                             (build-prolog-file-content info)))
    (if (project-zig? info)
        (dump-string-to-file "./src/assignment/Implementation.zig"
                             (build-zig-file-content info)))
    ;;
    (dump-string-to-file "content.tex"
                         "")
    (dump-string-to-file "figures.tex"
                         "")
    (symlink "./.genpro-metadata"
             "./src/.genpro-metadata")
    (symlink "./content.tex"
             "./src/content.tex")
    (symlink "./figures.tex"
             "./src/figures.tex")
;;
    (chdir "./src/")
    (run-lualatex-command info)
    (run-lwarpmk-html-command)
    (move-file pdf-file-name (string-append "../" pdf-file-name))
    (move-file html-file-name (string-append "../" html-file-name))
    (symlink pdf-file-name pdf-link-name)
    (symlink html-file-name html-link-name)))

(define (compile-project info)
  (chdir "./src/")
  ;;
  (if (project-apl? info)
      (compile-apl-component info))
  (if (project-c? info)
      (compile-c-component info))
  (if (project-cpp? info)
      (compile-cpp-component info))
  (if (project-guile? info)
      (compile-guile-component info))
  (if (project-java? info)
      (compile-java-component info))
  (if (project-ocaml? info)
      (compile-ocaml-component info))
  (if (project-prolog? info)
      (compile-prolog-component info))
  (if (project-zig? info)
      (compile-zig-component info))
  ;;
  (if (project-metapost? info)
      (compile-metapost-component info))
  (if (project-pdf? info)
      (compile-pdf-component info))
  (if (project-html? info)
      (compile-html-component info))
  (if (project-local-bibliography? info)
      (compile-local-bibliography-component info))
  (if (project-text? info)
      (compile-text-component info))
  (if (project-gemini? info)
      (compile-gemini-component info))
  (if (project-sql? info)
      (compile-sql-component info))
  ;;
  (chdir "../"))

;; Local Variables:
;; mode: scheme
;; End:
